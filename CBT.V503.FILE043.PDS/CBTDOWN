  /* --------------------  rexx procedure  -------------------- *
  | Name:      CBTDown                                         |
  |                                                            |
  | Function:  Download ALL of the CBTTape.org files, unzip,   |
  |            copy to z/OS, and RECEIVE them.                 |
  |                                                            |
  | Syntax:    %cbtdown hlq file opt                           |
  |                                                            |
  |            hlq - the HLQ where the files will be placed    |
  |                  in z/OS (e.g. hlq.FILEnnn.PDS)            |
  |                                                            |
  |            file - optional file number to get              |
  |                                                            |
  |            opt  - optional blank for current               |
  |                   U to get the Updated file                |
  |                                                            |
  | Usage Notes:  Requires the ability to use FTP to access    |
  |               www.cbttape.org and space in the /tmp        |
  |               filesystem for one file at a time.           |
  |                                                            |
  |               Must be executed from hlq.FILEIDX.PDS        |
  |                                                            |
  |               hlq.FILEIDX.PDS(CBTINDEX) must exist as      |
  |               it is used for the file access               |
  |                                                            |
  |               Uses the CBTCONFG for SYSOUT and VOLSER      |
  |               values for the RECEIVE command.              |
  |                                                            |
  | Author:    Lionel B. Dyck                                  |
  |                                                            |
  | History:  (most recent on top)                             |
  |            2021/06/21 LBD - Support VOLSER from CBTCONFG   |
  |            2021/05/09 LBD - Enable FWFRIENDLY (PASV) FTP   |
  |                           - change file # handling +0      |
  |            2021/05/01 LBD - Correction for Updates         |
  |            2021/04/30 LBD - Enable option U                |
  |                           - add return code                |
  |            2021/04/29 LBD - Add file and option            |
  |            2021/04/11 LBD - Add check for HLQ              |
  |            2021/04/10 LBD - Creation                       |
  |                                                            |
  * ---------------------------------------------------------- */
  arg hlq file opt

  if hlq = '' then do
    say ' '
    say 'Error.......'
    say ' '
    say 'the correct syntax is %CBTDOWN hlq'
    say 'and for some reason the hlq is missing.'
    say ' '
    say 'exiting'
    exit 16
  end

  if file /= '' then if datatype(file) /= 'NUM' then do
    say ' '
    say 'Error.......'
    say ' '
    say 'the correct syntax is %CBTDOWN hlq file'
    say 'and for some reason the file is not a valid file number.'
    say ' '
    say 'exiting'
    exit 16
  end

  /* --------------- *
  | Define defaults |
  * --------------- */
  parse value '' with null volser
  cbtdd = 'CBT'time('s')
  sysout = 'Z'

  call check_overrides

  if volser /= null then volser = 'VOLUME('volser')'

  x = listdsi("'"hlq".FILEIDX.PDS'")
  if x > 0 then do
    say 'Error.....'
    say ' '
    say "'"hlq".FILEIDX.PDS'" is sysdsn("'"hlq".FILEIDX.PDS'")
    exit 16
  end

  /* ------------------------------------------ *
  | Place the unzip tool into /tmp for our use |
  | - if it isn't already there                |
  * ------------------------------------------ */
  unzip_dsn = "//'"hlq".FILEIDX.PDS(UNZIP)'"

  cmd_file ='/tmp/'sysvar('sysuid')'.ftp'
  cmd = 'cd /tmp && ls -la unzip'
  x = do_command(cmd)
  if pos('not found',e.1) > 0 then do
    cmd = 'cd /tmp ; cp -B "'unzip_dsn'" unzip.pax; pax -rvf unzip.pax' ,
      '&& chmod +x unzip ; rm unzip.pax ; ls -laT /tmp/'
    x = do_command(cmd)
  end

  /* ------------------------------------------- *
  | Read the CBTINDEX for the files to download |
  * ------------------------------------------- */
  "Alloc f("cbtdd") shr reuse ds('"hlq".fileidx.pds(cbtindex)')"
  'Execio * diskr' cbtdd '(finis stem index.'
  'Free  f('cbtdd')'

  if file = null then
  do cbti = 1 to index.0
    file = word(index.cbti,1)
    if file = '001' then iterate
    erc  = get_files()
  end
  else do
    file = file + 0
    if length(file) < 3 then file = right(file+1000,3)
    erc  = get_files()
  end

  Exit erc

Get_Files:
  get_file = 'CBT'file'.zip'
  cmd = 'cd /tmp/  && rm 'get_file
  x = do_command(cmd)

  call Write_Command_File

  cmd = 'cd /tmp/ && ftp www.cbttape.org <' cmd_file ,
    '&& unzip -o' get_file
  x = do_command(cmd)

  archive = null
  if g.0 > 0 then
  do i = g.0 to 0 by -1
    if word(g.i,1) = 'inflating:' then do
      archive = word(g.i,2)
      leave
    end
  end

  cmd = 'cd /tmp/ && rm' cmd_file '&& rm' get_file
  x = do_command(cmd)

  if archive = null then do
    say 'Not Found.'
    say get_file 'was not found at www.cbttape.org.'
    return 8
  end

  cmd = 'cd /tmp/ && ls -la' archive
  x = do_command(cmd)
  space = (word(g.1,5)%50000 + 1) * 2
  zos = "'"hlq"."archive"'"

  say  'Copying file /tmp/'archive
  say  'into' zos
  say ' '

  call outtrap 'x.'
  'delete' zos
  call outtrap 'off'

  'alloc ds('zos') new spa('space','space') tr dsorg(ps)' ,
    'recfm(f b) lrecl(80) blksize(32720)' volser
  'free ds('zos')'
  from_dir = '/tmp/'archive
  'oget' "'"from_dir"'" zos 'Binary'
  erc = rc

  parse value archive with zospds'.' .
  if right(archive,4) = '.XMI' then do
    zospds = hlq'.'zospds'.PDS'

    say  'Receiving file' zos
    say  'into' zospds
    say ' '

    x = listdsi("'"zospds"'" "NORECALL")
    if x = 0 then  do
      call outtrap 'x.'
      dt = right(date('s',substr(syscreate,3,2)''right(syscreate,3),'j'),6)
      oldzos = zospds'.D'dt
      'rename' "'"zospds"'" "'"oldzos"'"
      call outtrap 'off'
    end

    'newstack'
    queue "dsn('"zospds"') sysout("sysout")" volser
    x = PROMPT('OFF')
    call outtrap 'x.'
    "Receive inds("zos")"
    erc = rc
    call outtrap 'off'
    'delstack'
    call outtrap 'x.'
    'delete' zos
    call outtrap 'off'
  end
  else  zospds = hlq'.'zospds'.DATA'
  cmd = 'cd /tmp/ && rm'  archive
  x = do_command(cmd)
  dsn = zospds
  return erc

  /* ----------------------------------------- *
  | Write the command file out in OMVS format |
  * ----------------------------------------- */
Write_Command_File:
  ftpc = 0
  drop ftp.
  call add_ftp 'anonymous'
  call add_ftp sysvar('sysuid')'@mail.com'
  call add_ftp 'bin'
  call add_ftp 'locsite fwfriendly'
  call add_ftp 'cd pub'
  if opt = 'U'
  then call add_ftp 'cd updates'
  else call add_ftp 'cd cbt'
  call add_ftp 'get' get_file
  call add_ftp 'quit'
  ftp.0 = ftpc
  /* ---------------------------------- *
  | Write the commands to omvs for use |
  * ---------------------------------- */
  Address syscall "writefile (cmd_file) 777 ftp."
  drop ftp.
  return

  /* ------------------------------- *
  | Add ftp command to command file |
  * ------------------------------- */
add_ftp:
  parse arg ftp_opt
  ftpc = ftpc + 1
  ftp.ftpc = ftp_opt
  return

  /* ------------------------ *
  | Process the OMVS command |
  * ------------------------ */
Do_Command:
  parse arg cmd
  if datatype(env.0) /= 'NUM' then call get_env
  drop g. e.
  x = bpxwunix(cmd,,g.,e.,env.)
  return x

Get_Env:
  x = bpxwunix('pwd',,g.,e.)
  home = strip(g.1)
  x = bpxwunix('env',,env.,e.)
  x = env.0 + 1
  env.x = 'HOME='home
  env.0 = x
  drop e.
  return

  /* ---------------------------------------------- *
  | Process the site customization override member |
  * ---------------------------------------------- */
Check_Overrides:
  "Alloc f("cbtdd") shr reuse ds('"hlq".FILEIDX.PDS(CBTCONFG)')"
  'Execio * diskr' cbtdd '(finis stem ovr.'
  'Free  f('cbtdd')'
  do i = 1 to ovr.0
    if left(ovr.i,1) = '*' then iterate
    Select
      When translate(word(ovr.i,1)) = 'SYSOUT' then
      sysout = word(ovr.i,3)
      When translate(word(ovr.i,1)) = 'VOLSER' then
      volser = word(ovr.i,3)
      Otherwise nop
    End
  end
  return
